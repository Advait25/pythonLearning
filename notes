why python
	created by Guido van Rossum in 1990,
	python 3 release in 2008
	
	easy to use language
	high focus on readability (all about indentation and not complex braces)
		reduces developers time 
	lots of libraries and framework

command line
	windows - 
		called 'command prompt'
		1)curr directory - 		cd
		2)contents of directories - 	dir
		3)change directories - 		cd/{dir name/path}
		4)go back a directory - 	cd ..
		5)clear screen - 		cls
	linux/mac os -
		it is called 'Terminal' in both systems
		1)curr directory - 		pwd
		2)contents of directories - 	ls
		3)change directories - 		cd/{dir name/path}
		4)go back a directory - 	cd ..	
		5)clear screen - 		clear
		
--------------------
numbers
	python has various types of numbers like integer, float etc.
	we can  perform all arithmatic oparation like  +, -, /(floor division), * etc
	power operations = 2 ** 3
		
-------------------
python has 'Dynamic Typing' i.e. -> we can same variable with different datatypes in the code
	x = 2 
	x = "name"
type() - to get datatype

--------------------
strings - single quote or double quotes.
	ordered sequence.
	indexing is used to find the position of a single character
		indexing - starts at 0 and then 1,2,3,4...
		reverse indexing - starts at 0 and then ....-4,-3,-2,-1
			if string length is unknown and if the last characters is needed then we can say string[-1] .
	slicing - grab substring - syntax -> [start:stop:step]
			default step size  = 1
	string formatting 
		print .formating - print('your string {}'.format('workds/chars to be inserted'))
		float formatting  - (value:width.precision f)

	string immutability
		string chars cannot be reassigned, Ex. -> name = 'Advait', name[2] = 'w' is not supported by string.
----------------------
Lists-	ordered seq that hold different object types
		can be nested
		stored in [] and ',' to separate the objects
		indexing/reverse indexing and slicing can be done same as strings.
		we can concatinate lists together	
		"vIMP - > Lists are Mutable unlike strings"	
		append and pop
		sort -  happens in the list , nothing is returned
		sorted - a sorted list is returned
		reverse -  reversing the string

---------------------
'None' object - special python object, indicating no value. 
				default return value of function if nothing to return
				best use is when we want to have an variable but not want initialize it right away 
					and do it later in the code, we can use 'None' so that python will not throw error
--------------------

Dictionary - {'key': 'value',...} pair, no idex location, retrived based on key
			 key should be string
			 cannot be sorted, unordered.
			 use when we only want to retrive the object absed on key and not index
			 dictionary can hold lot of different data types (int, float, string, list etc.)
			 "vIMP - > Dictionaries are Mutable unlike strings"	
-------------------

Tuple - are like lists but two differences
		'Immutable'
		'() instead of  []'	
		- main use - for data integraty -> when we want to pass the object in code and we don't them to change accidentaly
----------------------

Sets - unordered collection of unique sets.
	   there can only be one instance of object
	   best way to add objects in sets is to create a List and cast it into sets.

---------------------

Boolenas -  operators which allow to convey or return a True or False value ()capitalise T and F)

--------------------

File I/O
	(#only for Jupyter Notebook, - > 1) type pwd in cell ->> to find working directory for jupyter notebook)
	seek(0) - >  to get cursor to starting position
	readline - > get list, where each element in teh list is a line
	adding file location to open a file in a particular path
		windows - C:\\Users\\Advait\\Documents\\Learning\\pythonLearning
		linux/mac os - /UsersAdvait/Documents/Learning/pythonLearning
	opening file in -
		r - > read
		w - > write (overwrites in case file already exits or create new in case not file exists)
		a - > append to the file
		r+ - > read + write (no overwriting)
		w+ - > read + write (overwrites in case file already exits or create new in case not file exists)
	'with' statement - > new way to open a file, any code withing 'with' block will use the variable defined
						Example - > with open(file.txt) as F	
										'f' will be used here onwards

						*tip -  we don't have to worry about closing the file i.e. file.close() as 'with' will take care of that
-----------------------

Comparison operators
	==  equal to   	imp examples for == operator
		- 3.0 == 3 ->> true - python will not consider integer/float as long as value is same
		- 'bye' == 'bye' ->> true , 'Bye' == 'bye' ->> false, '2' == 2 ->> false
	!=  not equal to
	> greater than
	< less than
	>= greater than equal to
	<=less than equal to

	to chain multiple comparison operator statements we can use logical operators in python
	keywords 1) AND 2) OR 3) NOT 
	-note** 1 < 2 > 0.5 works but logical operators provide more readable code


-------------------------
Python Statements
	execute a code only when we want to 
	"*VIMP - >colons and indentation (white space) are very crucial in python statements"

	1) If Else ELIF
						if condn:
							block of code
						elif condn :
							block of code
						else (no condn needed) :
							block of code
							
							
	2) For Loop - to execute a block of code for every iteration if needed
						for item_variable in iterable object (i.e. iterable) :
							block of code
						**you can use below syntax when you don't want to use variable
								for _ in iterable:
									block of code


	3) While Loop - execute certain block of code until condn is true
						syntax .
							while condition:
								# body of while loop
						can combine while with else to create a control flow
							while condition:
								# body of while loop
							else
								# code when earlier condition fails
--------------------------------------------------------------
'important keywords for loops .
								1) pass	-  does nothing , but it is great placeholder in loops while creating big code
								2) break - breaks out of current enclosing loop
								3) continue - goes to the top of closet enclosing loop
--------------------------------------------------------------

usefule python operators
								1)  range() - a 'Generator function' ->  a function which generates data based on requirements at a particular time
											- it won't return anything directly by calling it i.e range(start,end,step) , range(1,10,2) won't return anything,
												we have to use it in a loop or cast it to a list to get the data
												->>"imp - > 'end' parameter is not inlcuded in raneg while 'start' is"
								2)  enumerate() - to keep track of index count in a list or string
								3) 	zip() - to zip 2 or more iterable, it returns a 'tuple'
										  - if the iterables are uneven, zip will stop  once the length of small iterable is passed
										  - just like range() we have to use it in a loop to get the data, simply calling won't return anything or cast it to a list
								4) 	in - to check if an object in the iterables( list, string, dictionary( on keys and values( use dict.values() ) ) ) or not , aprt from using it in the loop
								5) 	min and max -  finding minimum value from list of numbers and maximum respectively
								6)  random - built-in python library and has lot of functions
											- syntax for importing python library functions
												"from random import 'function name'"
												1) shuffle -  to shuffle a list, does not return anything
												2) randint -  to get random integer, returns random integer
								7) input() - taking user input ,
											- syntax -> input('enter that we want show to user')
											- "vIMP -  it always accepts anything that is passed by user as a STRING"

--------------------------------------------------------------

List Comprehension - unique easy way to create a list(not actually faster way, it actually takes same amount of time)
					- >  syntax
					     list = [var_name1 for var_name in 'string or list or any other iterable']
								-> var_name1 can be replaced by any arithmatic operation like x+2 or x*x
								-> also we can add if statements to get a praticular result after the iterable

--------------------------------------------------------------
